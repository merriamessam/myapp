# This is a basic workflow to help you get started with Actions

name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  sonar:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Install SonarScanner
        run: |
          # Download the SonarScanner CLI
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          # Unzip the downloaded file
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          # Set the SONAR_SCANNER_HOME environment variable to the directory where SonarScanner is installed
          echo "SONAR_SCANNER_HOME=$(pwd)/sonar-scanner-4.8.0.2856-linux" >> $GITHUB_ENV
          # Add the SonarScanner bin directory to the PATH
          echo "PATH=\$SONAR_SCANNER_HOME/bin:\$PATH" >> $GITHUB_ENV

      - name: Verify SonarScanner installation
        run: sonar-scanner --version

      - name: Run SonarCloud Scan
        run: |
          sonar-scanner \
            -Dsonar.projectKey=merriamessam_myapp \
            -Dsonar.organization=merriamessam \
            -Dsonar.python.version=3.9 \
            -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.12-7/x64

          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Adopt_jdk/17.0.12-7/x64

      - name: Install SonarScanner
        run: |
          sudo apt-get update
          sudo apt-get install -y openjdk-17-jdk
          wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.8.0.2856-linux.zip
          unzip sonar-scanner-cli-4.8.0.2856-linux.zip
          export PATH="$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin"
          echo "export PATH=\"$PATH:$(pwd)/sonar-scanner-4.8.0.2856-linux/bin\"" >> $GITHUB_ENV          


      - name: Run SonarCloud Scan
        run: |
          export JAVA_HOME=/opt/hostedtoolcache/Java_Adopt_jdk/17.0.12-7/x64
          sonar-scanner \
            -Dsonar.projectKey=merriamessam_myapp \
            -Dsonar.organization=merriamessam \
            -Dsonar.python.version=3.9 \
            -Dsonar.login="09ec13ce88ad34926297c3e563af95bcc9a7f05609ec13ce88ad34926297c3e563af95bcc9a7f056"
        env:
          SONAR_TOKEN: "09ec13ce88ad34926297c3e563af95bcc9a7f05609ec13ce88ad34926297c3e563af95bcc9a7f056"

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Minikube
        uses: medyagh/setup-minikube@master

      - name: Build and Push Docker image
        env:
          DOCKER_REPO: your-docker-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $DOCKER_REPO:$IMAGE_TAG .
          minikube image load $DOCKER_REPO:$IMAGE_TAG
        

      # - name: Set up kubectl
      #   uses: azure/setup-kubectl@v1
      #   with:
      #     version: 'latest'

      # # Runs a set of commands using the runners shell
      # - name: Run a multi-line script
      #   run: |
      #     echo Add other actions to build,
      #     echo test, and deploy your project.
      
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Set up Minikube
      uses: medyagh/setup-minikube@master

    - name: Start Minikube
      run: |
        minikube start
        minikube status      

    - name: Deploy to Minikube
      run: |
        kubectl apply -f deployment.yaml
        kubectl set image deployment/myapp myapp=$DOCKER_REPO:$IMAGE_TAG
        kubectl rollout status deployment/myapp

    - name: Run tests
      run: |
        minikube service list
        # Add your test commands here

    - name: Clean up
      if: always()
      run: minikube delete
